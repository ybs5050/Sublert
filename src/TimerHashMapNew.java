
import static java.awt.image.ImageObserver.HEIGHT;
import java.text.ParseException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author Youngmin
 */
public class TimerHashMapNew extends javax.swing.JFrame{

    /**
     * Creates new form TimerHashMapNew
     */
    
    TimerCtrl timerCtrl;
    
    public TimerHashMapNew(TimerCtrl timerCtrl) {
        this.timerCtrl = timerCtrl;
        this.setTitle("Add Timer");
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        subName = new javax.swing.JLabel();
        name = new javax.swing.JTextField();
        time = new javax.swing.JTextField();
        alertDate = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        frequency = new javax.swing.JTextField();
        add = new javax.swing.JButton();
        done = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        subName.setText("Alert Time: (hh:mm:ss)");

        name.setText("Name");
        name.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                nameMouseClicked(evt);
            }
        });

        time.setText("Time");
        time.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                timeMouseClicked(evt);
            }
        });

        alertDate.setText("Alert Frequency:(0~10)");

        jLabel1.setText("Subscription Name:");

        frequency.setText("Frequency");
        frequency.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                frequencyMouseClicked(evt);
            }
        });

        add.setText("Add");
        add.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addActionPerformed(evt);
            }
        });

        done.setText("Done");
        done.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                doneActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(add, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(alertDate)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 146, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(subName))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(name)
                    .addComponent(frequency)
                    .addComponent(time)
                    .addComponent(done, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(0, 0, 0))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(name, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(time, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(subName))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(frequency, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(alertDate))
                .addGap(2, 2, 2)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(add)
                    .addComponent(done)))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void nameMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_nameMouseClicked
        this.name.setText("");
    }//GEN-LAST:event_nameMouseClicked

    private void timeMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_timeMouseClicked
        this.time.setText("");
    }//GEN-LAST:event_timeMouseClicked

    private void frequencyMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_frequencyMouseClicked
        this.frequency.setText("");
    }//GEN-LAST:event_frequencyMouseClicked

    private void doneActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_doneActionPerformed
        TimerHashMapNew.this.dispose();
    }//GEN-LAST:event_doneActionPerformed

    private void addActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addActionPerformed
        boolean isNull = checkNull();
        if(!isNull) {
            String subName = this.name.getText();
            String time = this.time.getText();
            int freq = Integer.parseInt(this.frequency.getText());
            try {
                // Add object
                this.timerCtrl.currentTimerHashMap.addItem(new Subscription(subName), new Timer(freq, time));
            } catch (ParseException ex) {
                Logger.getLogger(TimerHashMapNew.class.getName()).log(Level.SEVERE, null, ex);
            }
            this.timerCtrl.refreshTable(this.timerCtrl, this.timerCtrl.currentTimerHashMap.getMap());
            TimerHashMapNew.this.dispose();
            System.out.println("Added Timer: " + time);
        } else {
            JOptionPane.showMessageDialog(rootPane, "Please check the text fields", "Error", HEIGHT);
        }
    }//GEN-LAST:event_addActionPerformed

    /**
     * @param args the command line arguments
     */
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton add;
    private javax.swing.JLabel alertDate;
    private javax.swing.JButton done;
    private javax.swing.JTextField frequency;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JTextField name;
    private javax.swing.JLabel subName;
    private javax.swing.JTextField time;
    // End of variables declaration//GEN-END:variables


    public boolean checkNull() {
        if (this.name.getText().isEmpty() || this.time.getText().isEmpty() || this.frequency.getText().isEmpty()
                || "Name".equals(this.name.getText()) || "Time".equals(this.time.getText()) 
                || this.frequency.getText().equals("Frequency")) {
            return true;
        } else {
            return false;
        }
    }
}
