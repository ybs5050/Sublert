
import java.util.Date;
import java.util.TreeMap;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.ListSelectionModel;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author Youngmin
 */
public class HistoryTreeMapTableView extends javax.swing.JFrame implements Display {

    /**
     * Creates new form HistoryTreeMapTableView
     */
    
    private HistoryCtrl hisCtrl;
    private TreeMap<History, Subscription> historyTreeMap;
    
    public HistoryTreeMapTableView(HistoryCtrl hisCtrl, TreeMap historyTreeMap) {
        this.hisCtrl = hisCtrl;
        this.historyTreeMap = historyTreeMap;
        this.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        historyTable = new javax.swing.JTable();
        newHistory = new javax.swing.JButton();
        viewHistory = new javax.swing.JButton();
        deleteHistory = new javax.swing.JButton();
        searchHistory = new javax.swing.JButton();
        exitFrame = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Alert Date History");

        historyTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        historyTable.setModel(new HistoryTreeMapTableModel(hisCtrl.currentHistoryTreeMap));
        historyTable.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        jScrollPane1.setViewportView(historyTable);

        newHistory.setText("New");
        newHistory.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newHistoryActionPerformed(evt);
            }
        });

        viewHistory.setText("Detail");
        viewHistory.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewHistoryActionPerformed(evt);
            }
        });

        deleteHistory.setText("Delete");
        deleteHistory.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteHistoryActionPerformed(evt);
            }
        });

        searchHistory.setText("Search");
        searchHistory.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchHistoryActionPerformed(evt);
            }
        });

        exitFrame.setText("Done");
        exitFrame.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitFrameActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addComponent(newHistory, javax.swing.GroupLayout.PREFERRED_SIZE, 145, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(viewHistory, javax.swing.GroupLayout.PREFERRED_SIZE, 145, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(deleteHistory, javax.swing.GroupLayout.DEFAULT_SIZE, 140, Short.MAX_VALUE))
            .addComponent(searchHistory, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(exitFrame, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(newHistory)
                    .addComponent(viewHistory)
                    .addComponent(deleteHistory))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(searchHistory)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(exitFrame))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void newHistoryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newHistoryActionPerformed
        HistoryTreeMapTableView.this.hisCtrl.getHistoryNew();
        hisCtrl.saveCurrentHistory();
    }//GEN-LAST:event_newHistoryActionPerformed

    private void viewHistoryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewHistoryActionPerformed
        
        // View object
        if(historyTable.getSelectedRowCount() == 0) {
            JOptionPane.showMessageDialog(rootPane, "Please select a row to proceed", "Error", HEIGHT);
        } else {
            int selectedTableRow = historyTable.getSelectedRow();
            int selectedModelRow = historyTable.convertRowIndexToModel(selectedTableRow);
            History tempHis = (History) this.historyTreeMap.keySet().toArray()[selectedTableRow];
            Subscription tempSub = this.historyTreeMap.get(tempHis);
            JOptionPane.showMessageDialog(rootPane, "Alerted Date: " + tempHis.getDate() + "\n" + "Subscription Name: " + tempSub.getSubscriptionName() + "\n" + "Price: " + tempSub.getSubscriptionPrice(), "Detail", HEIGHT);
        }
    }//GEN-LAST:event_viewHistoryActionPerformed

    private void exitFrameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitFrameActionPerformed
        HistoryTreeMapTableView.this.dispose();
    }//GEN-LAST:event_exitFrameActionPerformed

    private void deleteHistoryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteHistoryActionPerformed
        
        // Delete object
        if(historyTable.getSelectedRowCount() == 0) {
            JOptionPane.showMessageDialog(rootPane, "Please select a row to proceed", "Error", HEIGHT);
        } else {
            int selectedTableRow = historyTable.getSelectedRow();
            int selectedModelRow = historyTable.convertRowIndexToModel(selectedTableRow);
            History tempHis = (History) this.historyTreeMap.keySet().toArray()[selectedTableRow];
            Subscription tempSub = this.historyTreeMap.get(tempHis);
            // Delete object
            this.hisCtrl.currentHistoryTreeMap.removeItem(tempHis);
            this.hisCtrl.refreshTable(this.hisCtrl, this.hisCtrl.currentHistoryTreeMap.getMap());
            System.out.println("Deleted History: " + tempHis.getName());
        }
    }//GEN-LAST:event_deleteHistoryActionPerformed

    private void searchHistoryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchHistoryActionPerformed
        
        // Search object
        String name = JOptionPane.showInputDialog("Enter the name of the subscription you want to search");
        boolean found = false;
        if(name != null && !name.isEmpty()) {
            // Check if the sub exists
            if(this.historyTreeMap.values().contains(new Subscription(name, 0, "1/1/1"))) {
                for(History aa : this.historyTreeMap.keySet()) {
                    if(aa.getName().equals(name)) {
                        JOptionPane.showMessageDialog(rootPane, "Alerted Date: " + aa.getDate() + "\n" + "Subscription Name: " + aa.getName() + "\n" + "Price: " +  historyTreeMap.get(aa).getSubscriptionPrice(), "Found", HEIGHT);   
                    }   
                }
            } else {
                JOptionPane.showMessageDialog(rootPane, "History for subscription: " + name + " not found.", "Not Found", HEIGHT);
            }
        }
        //System.out.println(this.historyTreeMap.containsKey(new History(new Date("12/25/17"), "Netflix")));
        //System.out.println(this.historyTreeMap.containsValue(new Subscription("Netflix", 5.21, "12/25/17")));
    }//GEN-LAST:event_searchHistoryActionPerformed



    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton deleteHistory;
    private javax.swing.JButton exitFrame;
    private javax.swing.JTable historyTable;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton newHistory;
    private javax.swing.JButton searchHistory;
    private javax.swing.JButton viewHistory;
    // End of variables declaration//GEN-END:variables

    @Override
    public void showInformation() {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public void checkNull() {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }
    
    public void updateTable(HistoryCtrl hisCtrl) {
        this.hisCtrl = hisCtrl;
        this.historyTreeMap =  this.hisCtrl.currentHistoryTreeMap.getMap();
        this.hisCtrl.saveCurrentHistory();
    }
}
